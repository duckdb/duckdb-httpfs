# name: test/sql/secret/secret_refresh.test
# description: Tests secret refreshing
# group: [secrets]

require-env S3_TEST_SERVER_AVAILABLE 1

require-env AWS_DEFAULT_REGION

require-env AWS_ACCESS_KEY_ID

require-env AWS_SECRET_ACCESS_KEY

require-env DUCKDB_S3_ENDPOINT

require-env DUCKDB_S3_USE_SSL

require-env DUCKDB_S3_URL_STYLE

require httpfs

require parquet

statement ok
SET enable_logging=true

statement ok
set s3_url_style='${DUCKDB_S3_URL_STYLE}'

statement ok
set s3_use_ssl='${DUCKDB_S3_USE_SSL}'

statement ok
set s3_endpoint='${DUCKDB_S3_ENDPOINT}'

statement ok
set s3_region='${AWS_DEFAULT_REGION}'

# Create some test data
statement ok
CREATE SECRET s1 (
    TYPE S3,
    KEY_ID '${AWS_ACCESS_KEY_ID}',
    SECRET '${AWS_SECRET_ACCESS_KEY}'
)

statement ok
copy (select 1 as a) to 's3://test-bucket/test-file.parquet'

statement ok
DROP SECRET s1;

# Firstly: a secret that is initially wrong, but correct after refresh
statement ok
CREATE SECRET s1 (
    TYPE S3,
    KEY_ID 'BOGUS',
    SECRET 'ALSO BOGUS',
    REFRESH_INFO MAP {
        'KEY_ID': '${AWS_ACCESS_KEY_ID}',
        'SECRET': '${AWS_SECRET_ACCESS_KEY}'
    }
)

# Make the request: initial request will fail, but refresh will get triggered and the request succeeds on second attempt
statement ok
FROM "s3://test-bucket/test-file.parquet"

query I
SELECT message[0:46] FROM duckdb_logs WHERE message like '%Successfully refreshed secret%'
----
Successfully refreshed secret: s1, new key_id:

# Cleanup: drop secret and logs
statement ok
DROP SECRET s1;set enable_logging=false;set logging_storage='stdout';set logging_storage='memory';set enable_logging=true;

# Secondly: a secret that is initially wrong, and still incorrect afterwards (REFRESH will just use the original secret input to refresh)
statement ok
CREATE SECRET s1 (
    TYPE S3,
    KEY_ID 'BOGUS',
    SECRET 'ALSO BOGUS',
    REFRESH 1
)

statement error
FROM "s3://test-bucket/test-file.parquet"
----
HTTP 403

query I
SELECT message[0:46] FROM duckdb_logs WHERE message like '%Successfully refreshed secret%'
----
Successfully refreshed secret: s1, new key_id:

# Cleanup: drop secret and logs
statement ok
DROP SECRET s1;set enable_logging=false;set logging_storage='stdout';set logging_storage='memory';set enable_logging=true;

# Thirdly: a secret that is initially wrong, and contains incorrect REFRESH_INFO
statement ok
CREATE SECRET s1 (
    TYPE S3,
    KEY_ID 'BOGUS',
    SECRET 'ALSO BOGUS',
    REFRESH_INFO MAP {
        'THIS_KEY_DOES_NOT_EXIST': '${BOGUS}'
    }
)

# For now, we throw the actual error that get's thrown during refresh. Since refresh is op-in for now that ensures user can understand what's happening
statement error
FROM "s3://test-bucket/test-file.parquet"
----
Exception thrown while trying to refresh secret s1

# Cleanup: drop secret
statement ok
DROP SECRET s1;

# Set incorrect key id to force query to fail without secret
statement ok
set s3_access_key_id='bogus'

# Without secret this query will fail, but since there are no suitable secrets, no refresh attempt will be made
statement error
FROM "s3://test-bucket/test-file.parquet"
----
HTTP 403

# -> log empty
query II
SELECT log_level, message FROM duckdb_logs WHERE message like '%Successfully refreshed secret%'
----
