# name: test/sql/secret/gcs_oauth.test
# description: Test GCS OAuth2 bearer token support
# group: [secret]

require httpfs

statement ok
PRAGMA enable_verification

# Test creating a GCS secret with OAuth2 bearer token
statement ok
CREATE SECRET gcs_oauth_test (
    TYPE GCS,
    bearer_token 'test_oauth2_token_12345'
);

# Verify the secret was created
query I
SELECT COUNT(*) FROM duckdb_secrets() WHERE name = 'gcs_oauth_test' AND type = 'gcs';
----
1

# Verify bearer token is redacted
query I
SELECT COUNT(*) FROM duckdb_secrets() WHERE name = 'gcs_oauth_test' AND secret_string LIKE '%bearer_token=redacted%';
----
1

# Test creating a GCS secret with HMAC keys (backward compatibility)
statement ok
CREATE SECRET gcs_hmac_test (
    TYPE GCS,
    key_id 'test_key_id',
    secret 'test_secret'
);

# Verify both secrets exist
query II
SELECT name, type FROM duckdb_secrets() WHERE name IN ('gcs_oauth_test', 'gcs_hmac_test') ORDER BY name;
----
gcs_hmac_test	gcs
gcs_oauth_test	gcs

# Test creating a GCS secret with both bearer token and HMAC (bearer token should take precedence)
statement ok
CREATE SECRET gcs_mixed_test (
    TYPE GCS,
    bearer_token 'oauth_token',
    key_id 'hmac_key',
    secret 'hmac_secret'
);

# Verify all three secrets exist
query I
SELECT COUNT(*) FROM duckdb_secrets() WHERE name LIKE 'gcs_%test';
----
3

# Clean up
statement ok
DROP SECRET gcs_oauth_test;

statement ok
DROP SECRET gcs_hmac_test;

statement ok
DROP SECRET gcs_mixed_test;

# Verify all secrets are removed
query I
SELECT COUNT(*) FROM duckdb_secrets() WHERE name LIKE 'gcs_%test';
----
0

# Test that bearer_token parameter is not allowed for S3 secrets
statement error Unknown named parameter
CREATE SECRET s3_with_bearer (
    TYPE S3,
    bearer_token 'should_not_work'
);
----

# Test that bearer_token parameter is not allowed for R2 secrets  
statement error Unknown named parameter
CREATE SECRET r2_with_bearer (
    TYPE R2,
    bearer_token 'should_not_work'
);
----